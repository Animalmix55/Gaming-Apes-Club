/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type SentOffChain = ContractEventLog<{
  userId: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface GACStakingAncilary extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GACStakingAncilary;
  clone(): GACStakingAncilary;
  methods: {
    GACStakingChild(): NonPayableTransactionObject<string>;

    OnChainGACXP(): NonPayableTransactionObject<string>;

    /**
     * utilizes a permit to move the funds.
     * Sends GACXP off-chain by burning it and emitting a special event. Uses a permit.
     */
    sendGACXPOffChainWithPermit(
      userId: number | string | BN,
      amount: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Sends GACXP off-chain by burning it and emitting a special event.
     */
    sendGACXPOffChain(
      userId: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Gets the amount of GamingApeClub tokens the user has staked.
     */
    balanceOf(owner: string): NonPayableTransactionObject<string>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    ownerOf(arg0: number | string | BN): NonPayableTransactionObject<string>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: number | string | BN
    ): NonPayableTransactionObject<void>;

    approve(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<void>;

    getApproved(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean
    ): NonPayableTransactionObject<void>;

    isApprovedForAll(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    SentOffChain(cb?: Callback<SentOffChain>): EventEmitter;
    SentOffChain(
      options?: EventOptions,
      cb?: Callback<SentOffChain>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "SentOffChain", cb: Callback<SentOffChain>): void;
  once(
    event: "SentOffChain",
    options: EventOptions,
    cb: Callback<SentOffChain>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}

# This is a basic workflow to help you get started with Actions

name: CI/CD Frontend

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
    paths:
      - 'Frontend/**'

  pull_request:
    branches: [ master ]
    paths:
      - 'Frontend/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  updated-packages:
    runs-on: ubuntu-latest
    outputs:
      dashboard: ${{ steps.filter.outputs.dashboard }}
      market: ${{ steps.filter.outputs.market }}
      profile: ${{ steps.filter.outputs.profile }}
      shared: ${{ steps.filter.outputs.shared }}
      staking: ${{ steps.filter.outputs.staking }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          dashboard:
            - 'Frontend/packages/dashboard/**'
          market:
            - 'Frontend/packages/market/**'
          profile:
            - 'Frontend/packages/profile/**'
          shared:
            - 'Frontend/packages/shared-v2/**'
          staking:
            - 'Frontend/packages/staking/**'

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install lerna
        working-directory: Frontend/
        run: yarn global add lerna
        
      - name: Bootstrap lerna
        working-directory: Frontend/
        run: lerna bootstrap
        
      - name: Build
        working-directory: Frontend/
        run: yarn build --since=@~1 --include-dependencies

      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: Builds
          # the root will be the contents of packages (with only packages with dist folders)
          path: |
            Frontend/packages/*/dist
            Frontend/packages/*/*.{png,xml,html,webmanifest,ico}


  production-deploy:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged
    needs: 
      - build
      - updated-packages
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@master
        with:
          name: Builds
          path: ./

      - name: Sync Dashboard
        if: needs.updated-packages.outputs.dashboard == 'true'
        uses: SamKirkland/FTP-Deploy-Action@4.3.2
        with:
          server: ${{ secrets.CI_FTP_HOST }}
          username: ${{ secrets.CI_FTP_USER }}
          password: ${{ secrets.CI_FTP_PASSWORD }}
          port: ${{ secrets.CI_FTP_PORT }}
          local-dir: dashboard/
          server-dir: home.gamingapeclub.com/public_html/

      

          
      

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DevelopershipTransferred = ContractEventLog<{
  previousDeveloper: string;
  newDeveloper: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface GACStaking extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GACStaking;
  clone(): GACStaking;
  methods: {
    SEND_MESSAGE_EVENT_SIG(): NonPayableTransactionObject<string>;

    checkpointManager(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current developer.
     */
    developer(): NonPayableTransactionObject<string>;

    fxChildTunnel(): NonPayableTransactionObject<string>;

    fxRoot(): NonPayableTransactionObject<string>;

    gacToken(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    processedExits(
      arg0: string | number[]
    ): NonPayableTransactionObject<boolean>;

    /**
     * This function verifies if the transaction actually happened on child chain
     * receive message from  L2 to L1, validated by proof
     * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
     */
    receiveMessage(
      inputData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Users' staked tokens mapped from their address
     */
    staked(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    stakingPaused(): NonPayableTransactionObject<boolean>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string
    ): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Stakes the given token ids, provided the contract is approved to move them.
     * @param tokenIds - the token ids to stake
     */
    stake(
      tokenIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * Unstakes the given token ids.
     * @param tokenIds - the token ids to unstake
     */
    unstake(
      tokenIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * Updates the paused state of staking.
     * @param paused - the state's new value.
     */
    setStakingPaused(paused: boolean): NonPayableTransactionObject<void>;

    /**
     * Allows permissioned setting of fxChildTunnel
     * @param _fxChildTunnel - the fxChildTunnel address
     */
    setFxChildTunnel(_fxChildTunnel: string): NonPayableTransactionObject<void>;
  };
  events: {
    DevelopershipTransferred(
      cb?: Callback<DevelopershipTransferred>
    ): EventEmitter;
    DevelopershipTransferred(
      options?: EventOptions,
      cb?: Callback<DevelopershipTransferred>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "DevelopershipTransferred",
    cb: Callback<DevelopershipTransferred>
  ): void;
  once(
    event: "DevelopershipTransferred",
    options: EventOptions,
    cb: Callback<DevelopershipTransferred>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GACStakingInterface extends utils.Interface {
  functions: {
    "SEND_MESSAGE_EVENT_SIG()": FunctionFragment;
    "checkpointManager()": FunctionFragment;
    "developer()": FunctionFragment;
    "fxChildTunnel()": FunctionFragment;
    "fxRoot()": FunctionFragment;
    "gacToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "processedExits(bytes32)": FunctionFragment;
    "receiveMessage(bytes)": FunctionFragment;
    "renounceDevelopership()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "staked(address,uint256)": FunctionFragment;
    "stakingPaused()": FunctionFragment;
    "transferDevelopership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "stake(uint256[])": FunctionFragment;
    "unstake(uint256[])": FunctionFragment;
    "setStakingPaused(bool)": FunctionFragment;
    "setFxChildTunnel(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SEND_MESSAGE_EVENT_SIG"
      | "checkpointManager"
      | "developer"
      | "fxChildTunnel"
      | "fxRoot"
      | "gacToken"
      | "owner"
      | "processedExits"
      | "receiveMessage"
      | "renounceDevelopership"
      | "renounceOwnership"
      | "staked"
      | "stakingPaused"
      | "transferDevelopership"
      | "transferOwnership"
      | "stake"
      | "unstake"
      | "setStakingPaused"
      | "setFxChildTunnel"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fxChildTunnel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fxRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "gacToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedExits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceDevelopership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferDevelopership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFxChildTunnel",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fxChildTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gacToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceDevelopership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDevelopership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFxChildTunnel",
    data: BytesLike
  ): Result;

  events: {
    "DevelopershipTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DevelopershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DevelopershipTransferredEventObject {
  previousDeveloper: string;
  newDeveloper: string;
}
export type DevelopershipTransferredEvent = TypedEvent<
  [string, string],
  DevelopershipTransferredEventObject
>;

export type DevelopershipTransferredEventFilter =
  TypedEventFilter<DevelopershipTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GACStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GACStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    checkpointManager(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<[string]>;

    fxChildTunnel(overrides?: CallOverrides): Promise<[string]>;

    fxRoot(overrides?: CallOverrides): Promise<[string]>;

    gacToken(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * This function verifies if the transaction actually happened on child chain
     * receive message from  L2 to L1, validated by proof
     * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
     */
    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Users' staked tokens mapped from their address
     */
    staked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Stakes the given token ids, provided the contract is approved to move them.
     * @param tokenIds - the token ids to stake
     */
    stake(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Unstakes the given token ids.
     * @param tokenIds - the token ids to unstake
     */
    unstake(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Updates the paused state of staking.
     * @param paused - the state's new value.
     */
    setStakingPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows permissioned setting of fxChildTunnel
     * @param _fxChildTunnel - the fxChildTunnel address
     */
    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  checkpointManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current developer.
   */
  developer(overrides?: CallOverrides): Promise<string>;

  fxChildTunnel(overrides?: CallOverrides): Promise<string>;

  fxRoot(overrides?: CallOverrides): Promise<string>;

  gacToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * This function verifies if the transaction actually happened on child chain
   * receive message from  L2 to L1, validated by proof
   * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
   */
  receiveMessage(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
   */
  renounceDevelopership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Users' staked tokens mapped from their address
   */
  staked(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stakingPaused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
   */
  transferDevelopership(
    newDeveloper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Stakes the given token ids, provided the contract is approved to move them.
   * @param tokenIds - the token ids to stake
   */
  stake(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Unstakes the given token ids.
   * @param tokenIds - the token ids to unstake
   */
  unstake(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Updates the paused state of staking.
   * @param paused - the state's new value.
   */
  setStakingPaused(
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows permissioned setting of fxChildTunnel
   * @param _fxChildTunnel - the fxChildTunnel address
   */
  setFxChildTunnel(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    checkpointManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<string>;

    fxChildTunnel(overrides?: CallOverrides): Promise<string>;

    fxRoot(overrides?: CallOverrides): Promise<string>;

    gacToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * This function verifies if the transaction actually happened on child chain
     * receive message from  L2 to L1, validated by proof
     * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
     */
    receiveMessage(
      inputData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Users' staked tokens mapped from their address
     */
    staked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakingPaused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Stakes the given token ids, provided the contract is approved to move them.
     * @param tokenIds - the token ids to stake
     */
    stake(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    /**
     * Unstakes the given token ids.
     * @param tokenIds - the token ids to unstake
     */
    unstake(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    /**
     * Updates the paused state of staking.
     * @param paused - the state's new value.
     */
    setStakingPaused(paused: boolean, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows permissioned setting of fxChildTunnel
     * @param _fxChildTunnel - the fxChildTunnel address
     */
    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DevelopershipTransferred(address,address)"(
      previousDeveloper?: string | null,
      newDeveloper?: string | null
    ): DevelopershipTransferredEventFilter;
    DevelopershipTransferred(
      previousDeveloper?: string | null,
      newDeveloper?: string | null
    ): DevelopershipTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<BigNumber>;

    fxChildTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    fxRoot(overrides?: CallOverrides): Promise<BigNumber>;

    gacToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function verifies if the transaction actually happened on child chain
     * receive message from  L2 to L1, validated by proof
     * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
     */
    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Users' staked tokens mapped from their address
     */
    staked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Stakes the given token ids, provided the contract is approved to move them.
     * @param tokenIds - the token ids to stake
     */
    stake(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Unstakes the given token ids.
     * @param tokenIds - the token ids to unstake
     */
    unstake(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Updates the paused state of staking.
     * @param paused - the state's new value.
     */
    setStakingPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Allows permissioned setting of fxChildTunnel
     * @param _fxChildTunnel - the fxChildTunnel address
     */
    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SEND_MESSAGE_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gacToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function verifies if the transaction actually happened on child chain
     * receive message from  L2 to L1, validated by proof
     * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
     */
    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Users' staked tokens mapped from their address
     */
    staked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Stakes the given token ids, provided the contract is approved to move them.
     * @param tokenIds - the token ids to stake
     */
    stake(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Unstakes the given token ids.
     * @param tokenIds - the token ids to unstake
     */
    unstake(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the paused state of staking.
     * @param paused - the state's new value.
     */
    setStakingPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows permissioned setting of fxChildTunnel
     * @param _fxChildTunnel - the fxChildTunnel address
     */
    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

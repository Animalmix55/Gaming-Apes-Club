/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DevelopershipTransferred = ContractEventLog<{
  previousDeveloper: string;
  newDeveloper: string;
  0: string;
  1: string;
}>;
export type MessageSent = ContractEventLog<{
  message: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface GACStakingChild extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GACStakingChild;
  clone(): GACStakingChild;
  methods: {
    GACXP(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current developer.
     */
    developer(): NonPayableTransactionObject<string>;

    fxChild(): NonPayableTransactionObject<string>;

    fxRootTunnel(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    processMessageFromRoot(
      stateId: number | string | BN,
      rootMessageSender: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(): NonPayableTransactionObject<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * A linked list of reward tiers based on holdings
     */
    rewards(arg0: number | string | BN): NonPayableTransactionObject<{
      amount: string;
      nextTier: string;
      0: string;
      1: string;
    }>;

    /**
     * Users' stakes mapped from their address
     */
    stakes(arg0: string): NonPayableTransactionObject<{
      amount: string;
      lastUpdated: string;
      0: string;
      1: string;
    }>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string
    ): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Sets/updates the address for the root tunnel
     * @param _fxRootTunnel - the fxRootTunnel address
     */
    setFxRootTunnel(_fxRootTunnel: string): NonPayableTransactionObject<void>;

    /**
     * Resets the reward calculation schema.
     * @param amounts - a list of held amounts in increasing order.
     * @param newRewards - a parallel list to amounts containing the summative yields per period for the respective amount.
     */
    setRewards(
      amounts: (number | string | BN)[],
      newRewards: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * Claims the pending reward for the transaction sender.
     */
    claimReward(): NonPayableTransactionObject<void>;

    /**
     * Gets the pending reward for the provided user.
     * @param user - the user whose reward is being sought.
     */
    getReward(user: string): NonPayableTransactionObject<string>;

    /**
     * Dumps the rewards currently programmed in per tier as two parallel arrays defining (amount, yield) pairs.
     */
    dumpRewards(): NonPayableTransactionObject<{
      0: string[];
      1: string[];
    }>;
  };
  events: {
    DevelopershipTransferred(
      cb?: Callback<DevelopershipTransferred>
    ): EventEmitter;
    DevelopershipTransferred(
      options?: EventOptions,
      cb?: Callback<DevelopershipTransferred>
    ): EventEmitter;

    MessageSent(cb?: Callback<MessageSent>): EventEmitter;
    MessageSent(
      options?: EventOptions,
      cb?: Callback<MessageSent>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "DevelopershipTransferred",
    cb: Callback<DevelopershipTransferred>
  ): void;
  once(
    event: "DevelopershipTransferred",
    options: EventOptions,
    cb: Callback<DevelopershipTransferred>
  ): void;

  once(event: "MessageSent", cb: Callback<MessageSent>): void;
  once(
    event: "MessageSent",
    options: EventOptions,
    cb: Callback<MessageSent>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}

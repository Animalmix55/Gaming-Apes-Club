/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GamingApeClubInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "developer()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "maxPerWallet()": FunctionFragment;
    "maxWhitelistSupply()": FunctionFragment;
    "maximumSupply()": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicStart()": FunctionFragment;
    "renounceDevelopership()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferDevelopership(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verify(bytes32,bytes32,bytes32[])": FunctionFragment;
    "whitelistEnd()": FunctionFragment;
    "whitelistReset()": FunctionFragment;
    "whitelistStart()": FunctionFragment;
    "ownerMint(uint64,address)": FunctionFragment;
    "setMaxPerWallet(uint16)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setMintPrice(uint256)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "setWhitelistMaxSupply(uint16)": FunctionFragment;
    "setMintDates(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "getPresaleMints(address,bool)": FunctionFragment;
    "getPublicMints(address)": FunctionFragment;
    "premint(uint16,bytes32[])": FunctionFragment;
    "mint(uint16)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "developer"
      | "getApproved"
      | "isApprovedForAll"
      | "maxPerWallet"
      | "maxWhitelistSupply"
      | "maximumSupply"
      | "mintPrice"
      | "name"
      | "owner"
      | "ownerOf"
      | "publicStart"
      | "renounceDevelopership"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferDevelopership"
      | "transferFrom"
      | "transferOwnership"
      | "verify"
      | "whitelistEnd"
      | "whitelistReset"
      | "whitelistStart"
      | "ownerMint"
      | "setMaxPerWallet"
      | "setBaseURI"
      | "setMintPrice"
      | "setMerkleRoot"
      | "setWhitelistMaxSupply"
      | "setMintDates"
      | "withdraw"
      | "getPresaleMints"
      | "getPublicMints"
      | "premint"
      | "mint"
      | "burn"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWhitelistSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceDevelopership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferDevelopership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintDates",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPresaleMints",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicMints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "premint",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWhitelistSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceDevelopership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDevelopership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPresaleMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "premint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DevelopershipTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevelopershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DevelopershipTransferredEventObject {
  previousDeveloper: string;
  newDeveloper: string;
}
export type DevelopershipTransferredEvent = TypedEvent<
  [string, string],
  DevelopershipTransferredEventObject
>;

export type DevelopershipTransferredEventFilter =
  TypedEventFilter<DevelopershipTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface GamingApeClub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GamingApeClubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxPerWallet(overrides?: CallOverrides): Promise<[number]>;

    maxWhitelistSupply(overrides?: CallOverrides): Promise<[number]>;

    maximumSupply(overrides?: CallOverrides): Promise<[number]>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Verifies that a given leaf lives under the provided root based on the proof.
     * @param leaf - the leaf you are proving exists in the tree (keccak hash)
     * @param proof - the proof that verifies that the given leaf exists under that root.
     * @param root - the root of the merkle tree (keccak hash)
     */
    verify(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistReset(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows for the owner to mint for free.
     * @param quantity - the quantity to mint.
     * @param to - the address to recieve that minted quantity.
     */
    ownerMint(
      quantity: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the wallet max for both sales
     * @param newMax - the new wallet max for the two sales
     */
    setMaxPerWallet(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * be sure to terminate with a slash
     * Sets the base URI for all tokens
     * @param uri - the target base uri (ex: 'https://google.com/')
     */
    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Updates the mint price
     * @param price - the price in WEI
     */
    setMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Updates the merkle root
     * @param root - the new merkle root
     */
    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Updates the supply cap on whitelist. If a given transaction will cause the supply to increase beyond this number, it will fail.
     */
    setWhitelistMaxSupply(
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Updates the mint dates.
     * @param pubStartDate - the start date for public in UNIX seconds.
     * @param wlEndDate - the end date for whitelist in UNIX seconds.
     * @param wlResetDate - the reset date for whitelist in UNIX seconds.
     * @param wlStartDate - the start date for whitelist in UNIX seconds.
     */
    setMintDates(
      wlStartDate: BigNumberish,
      wlResetDate: BigNumberish,
      wlEndDate: BigNumberish,
      pubStartDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws balance from the contract to the dividend recipients within.
     */
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * A handy getter to retrieve the number of private mints conducted by a user.
     * @param postReset - retrieves the number of mints after the whitelist reset.
     * @param user - the user to query for.
     */
    getPresaleMints(
      user: string,
      postReset: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * A handy getter to retrieve the number of public mints conducted by a user.
     * @param user - the user to query for.
     */
    getPublicMints(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Mints in the premint stage by using a signed transaction from a merkle tree whitelist.
     * @param amount - the amount of tokens to mint. Will fail if exceeds allowable amount.
     * @param proof - the merkle proof from the root to the whitelisted address.
     */
    premint(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Mints one token provided it is possible to.This function allows minting in the public sale.
     */
    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Burns the provided token id if you own it. Reduces the supply by 1.
     * @param tokenId - the ID of the token to be burned.
     */
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * See {IERC721-approve}.
   */
  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-balanceOf}.
   */
  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current developer.
   */
  developer(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-getApproved}.
   */
  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxPerWallet(overrides?: CallOverrides): Promise<number>;

  maxWhitelistSupply(overrides?: CallOverrides): Promise<number>;

  maximumSupply(overrides?: CallOverrides): Promise<number>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {IERC721Metadata-name}.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-ownerOf}.
   */
  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  publicStart(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
   */
  renounceDevelopership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-setApprovalForAll}.
   */
  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC721Metadata-symbol}.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
   */
  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
   */
  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * See {IERC721Metadata-tokenURI}.
   */
  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721Enumerable-totalSupply}.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
   */
  transferDevelopership(
    newDeveloper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-transferFrom}.
   */
  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Verifies that a given leaf lives under the provided root based on the proof.
   * @param leaf - the leaf you are proving exists in the tree (keccak hash)
   * @param proof - the proof that verifies that the given leaf exists under that root.
   * @param root - the root of the merkle tree (keccak hash)
   */
  verify(
    root: BytesLike,
    leaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistEnd(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistReset(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistStart(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows for the owner to mint for free.
   * @param quantity - the quantity to mint.
   * @param to - the address to recieve that minted quantity.
   */
  ownerMint(
    quantity: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the wallet max for both sales
   * @param newMax - the new wallet max for the two sales
   */
  setMaxPerWallet(
    newMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * be sure to terminate with a slash
   * Sets the base URI for all tokens
   * @param uri - the target base uri (ex: 'https://google.com/')
   */
  setBaseURI(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Updates the mint price
   * @param price - the price in WEI
   */
  setMintPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Updates the merkle root
   * @param root - the new merkle root
   */
  setMerkleRoot(
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Updates the supply cap on whitelist. If a given transaction will cause the supply to increase beyond this number, it will fail.
   */
  setWhitelistMaxSupply(
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Updates the mint dates.
   * @param pubStartDate - the start date for public in UNIX seconds.
   * @param wlEndDate - the end date for whitelist in UNIX seconds.
   * @param wlResetDate - the reset date for whitelist in UNIX seconds.
   * @param wlStartDate - the start date for whitelist in UNIX seconds.
   */
  setMintDates(
    wlStartDate: BigNumberish,
    wlResetDate: BigNumberish,
    wlEndDate: BigNumberish,
    pubStartDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws balance from the contract to the dividend recipients within.
   */
  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * A handy getter to retrieve the number of private mints conducted by a user.
   * @param postReset - retrieves the number of mints after the whitelist reset.
   * @param user - the user to query for.
   */
  getPresaleMints(
    user: string,
    postReset: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * A handy getter to retrieve the number of public mints conducted by a user.
   * @param user - the user to query for.
   */
  getPublicMints(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Mints in the premint stage by using a signed transaction from a merkle tree whitelist.
   * @param amount - the amount of tokens to mint. Will fail if exceeds allowable amount.
   * @param proof - the merkle proof from the root to the whitelisted address.
   */
  premint(
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Mints one token provided it is possible to.This function allows minting in the public sale.
   */
  mint(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Burns the provided token id if you own it. Reduces the supply by 1.
   * @param tokenId - the ID of the token to be burned.
   */
  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxPerWallet(overrides?: CallOverrides): Promise<number>;

    maxWhitelistSupply(overrides?: CallOverrides): Promise<number>;

    maximumSupply(overrides?: CallOverrides): Promise<number>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    publicStart(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Verifies that a given leaf lives under the provided root based on the proof.
     * @param leaf - the leaf you are proving exists in the tree (keccak hash)
     * @param proof - the proof that verifies that the given leaf exists under that root.
     * @param root - the root of the merkle tree (keccak hash)
     */
    verify(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistEnd(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistReset(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistStart(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows for the owner to mint for free.
     * @param quantity - the quantity to mint.
     * @param to - the address to recieve that minted quantity.
     */
    ownerMint(
      quantity: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the wallet max for both sales
     * @param newMax - the new wallet max for the two sales
     */
    setMaxPerWallet(
      newMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * be sure to terminate with a slash
     * Sets the base URI for all tokens
     * @param uri - the target base uri (ex: 'https://google.com/')
     */
    setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Updates the mint price
     * @param price - the price in WEI
     */
    setMintPrice(price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Updates the merkle root
     * @param root - the new merkle root
     */
    setMerkleRoot(root: BytesLike, overrides?: CallOverrides): Promise<void>;

    /**
     * Updates the supply cap on whitelist. If a given transaction will cause the supply to increase beyond this number, it will fail.
     */
    setWhitelistMaxSupply(
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the mint dates.
     * @param pubStartDate - the start date for public in UNIX seconds.
     * @param wlEndDate - the end date for whitelist in UNIX seconds.
     * @param wlResetDate - the reset date for whitelist in UNIX seconds.
     * @param wlStartDate - the start date for whitelist in UNIX seconds.
     */
    setMintDates(
      wlStartDate: BigNumberish,
      wlResetDate: BigNumberish,
      wlEndDate: BigNumberish,
      pubStartDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws balance from the contract to the dividend recipients within.
     */
    withdraw(overrides?: CallOverrides): Promise<void>;

    /**
     * A handy getter to retrieve the number of private mints conducted by a user.
     * @param postReset - retrieves the number of mints after the whitelist reset.
     * @param user - the user to query for.
     */
    getPresaleMints(
      user: string,
      postReset: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A handy getter to retrieve the number of public mints conducted by a user.
     * @param user - the user to query for.
     */
    getPublicMints(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Mints in the premint stage by using a signed transaction from a merkle tree whitelist.
     * @param amount - the amount of tokens to mint. Will fail if exceeds allowable amount.
     * @param proof - the merkle proof from the root to the whitelisted address.
     */
    premint(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Mints one token provided it is possible to.This function allows minting in the public sale.
     */
    mint(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Burns the provided token id if you own it. Reduces the supply by 1.
     * @param tokenId - the ID of the token to be burned.
     */
    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "DevelopershipTransferred(address,address)"(
      previousDeveloper?: string | null,
      newDeveloper?: string | null
    ): DevelopershipTransferredEventFilter;
    DevelopershipTransferred(
      previousDeveloper?: string | null,
      newDeveloper?: string | null
    ): DevelopershipTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxWhitelistSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maximumSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicStart(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Verifies that a given leaf lives under the provided root based on the proof.
     * @param leaf - the leaf you are proving exists in the tree (keccak hash)
     * @param proof - the proof that verifies that the given leaf exists under that root.
     * @param root - the root of the merkle tree (keccak hash)
     */
    verify(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistEnd(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistReset(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistStart(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows for the owner to mint for free.
     * @param quantity - the quantity to mint.
     * @param to - the address to recieve that minted quantity.
     */
    ownerMint(
      quantity: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the wallet max for both sales
     * @param newMax - the new wallet max for the two sales
     */
    setMaxPerWallet(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * be sure to terminate with a slash
     * Sets the base URI for all tokens
     * @param uri - the target base uri (ex: 'https://google.com/')
     */
    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Updates the mint price
     * @param price - the price in WEI
     */
    setMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Updates the merkle root
     * @param root - the new merkle root
     */
    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Updates the supply cap on whitelist. If a given transaction will cause the supply to increase beyond this number, it will fail.
     */
    setWhitelistMaxSupply(
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Updates the mint dates.
     * @param pubStartDate - the start date for public in UNIX seconds.
     * @param wlEndDate - the end date for whitelist in UNIX seconds.
     * @param wlResetDate - the reset date for whitelist in UNIX seconds.
     * @param wlStartDate - the start date for whitelist in UNIX seconds.
     */
    setMintDates(
      wlStartDate: BigNumberish,
      wlResetDate: BigNumberish,
      wlEndDate: BigNumberish,
      pubStartDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws balance from the contract to the dividend recipients within.
     */
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * A handy getter to retrieve the number of private mints conducted by a user.
     * @param postReset - retrieves the number of mints after the whitelist reset.
     * @param user - the user to query for.
     */
    getPresaleMints(
      user: string,
      postReset: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A handy getter to retrieve the number of public mints conducted by a user.
     * @param user - the user to query for.
     */
    getPublicMints(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Mints in the premint stage by using a signed transaction from a merkle tree whitelist.
     * @param amount - the amount of tokens to mint. Will fail if exceeds allowable amount.
     * @param proof - the merkle proof from the root to the whitelisted address.
     */
    premint(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Mints one token provided it is possible to.This function allows minting in the public sale.
     */
    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Burns the provided token id if you own it. Reduces the supply by 1.
     * @param tokenId - the ID of the token to be burned.
     */
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * See {IERC721-approve}.
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current developer.
     */
    developer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPerWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWhitelistSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without developer. It will not be possible to call `onlyDeveloper` functions anymore. Can only be called by the current developer. NOTE: Renouncing developership will leave the contract without an developer, thereby removing any functionality that is only available to the developer.
     */
    renounceDevelopership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-setApprovalForAll}.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-tokenURI}.
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Enumerable-totalSupply}.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers developership of the contract to a new account (`newDeveloper`). Can only be called by the current developer.
     */
    transferDevelopership(
      newDeveloper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Verifies that a given leaf lives under the provided root based on the proof.
     * @param leaf - the leaf you are proving exists in the tree (keccak hash)
     * @param proof - the proof that verifies that the given leaf exists under that root.
     * @param root - the root of the merkle tree (keccak hash)
     */
    verify(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistReset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows for the owner to mint for free.
     * @param quantity - the quantity to mint.
     * @param to - the address to recieve that minted quantity.
     */
    ownerMint(
      quantity: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the wallet max for both sales
     * @param newMax - the new wallet max for the two sales
     */
    setMaxPerWallet(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * be sure to terminate with a slash
     * Sets the base URI for all tokens
     * @param uri - the target base uri (ex: 'https://google.com/')
     */
    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the mint price
     * @param price - the price in WEI
     */
    setMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the merkle root
     * @param root - the new merkle root
     */
    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the supply cap on whitelist. If a given transaction will cause the supply to increase beyond this number, it will fail.
     */
    setWhitelistMaxSupply(
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the mint dates.
     * @param pubStartDate - the start date for public in UNIX seconds.
     * @param wlEndDate - the end date for whitelist in UNIX seconds.
     * @param wlResetDate - the reset date for whitelist in UNIX seconds.
     * @param wlStartDate - the start date for whitelist in UNIX seconds.
     */
    setMintDates(
      wlStartDate: BigNumberish,
      wlResetDate: BigNumberish,
      wlEndDate: BigNumberish,
      pubStartDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws balance from the contract to the dividend recipients within.
     */
    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * A handy getter to retrieve the number of private mints conducted by a user.
     * @param postReset - retrieves the number of mints after the whitelist reset.
     * @param user - the user to query for.
     */
    getPresaleMints(
      user: string,
      postReset: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A handy getter to retrieve the number of public mints conducted by a user.
     * @param user - the user to query for.
     */
    getPublicMints(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mints in the premint stage by using a signed transaction from a merkle tree whitelist.
     * @param amount - the amount of tokens to mint. Will fail if exceeds allowable amount.
     * @param proof - the merkle proof from the root to the whitelisted address.
     */
    premint(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Mints one token provided it is possible to.This function allows minting in the public sale.
     */
    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Burns the provided token id if you own it. Reduces the supply by 1.
     * @param tokenId - the ID of the token to be burned.
     */
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
